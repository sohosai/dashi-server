//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use crate::active_enum::Record;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "label")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub visible_id: String,
    pub is_max: bool,
    pub record: Record,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::item::Entity")]
    Item,
    #[sea_orm(has_many = "super::trash::Entity")]
    Trash,
}

impl Related<super::item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Item.def()
    }
}

impl Related<super::trash::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trash.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
